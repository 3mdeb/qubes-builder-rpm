#!/bin/bash

# Default redirection or errors
ERR_OUTPUT="/dev/null"

set -e
if [ "${VERBOSE:-0}" -ge 2 ] || [ "${DEBUG:-0}" -eq 1 ]; then
    set -x
    ERR_OUTPUT="/dev/stderr"
fi

if [ $# -lt 2 ]; then
    echo "Usage: $0 file.spec field" >&2
    exit 1
fi

[[ "x$(basename "${1}.in")" == "x.in" ]] && exit 0

# $RPM_QUERY_DEFINES doesn't work here for multiple reasons:
# - it isn't exported by Makefile.rpmbuilder
# - it contains quoted spaces, which aren't handled properly when are part of a
#   variable
# To workaround this, define %{dist} manually - should be good enough for most
# queries done through this script.

if [ -r "${1}.in" ]; then
    #rpm -q $RPM_QUERY_DEFINES --qf "$2" --specfile <(`dirname $0`/generate-spec "${1}.in" /dev/stdout) 2>/dev/null
    # need to create a file due to a bug in process substitution (e.g. artwork package)
    tmp_spec=$(mktemp --tmpdir tmp.XXXXXX.spec)
    "$(dirname "$0")/generate-spec" "${1}.in" "${tmp_spec}" 2> $ERR_OUTPUT
    if [ "$2" = "%{SOURCE0}" ]; then
        "$(dirname "$0")/../tools/spectool" --list-files --source 0 "${tmp_spec}" 2> $ERR_OUTPUT
    else
        rpm -q --define "dist .$DIST" \
            --qf "$2" --specfile "${tmp_spec}" 2> $ERR_OUTPUT
    fi
    rm -f "${tmp_spec}"
else
    if [ "$2" = "%{SOURCE0}" ]; then
        "$(dirname "$0")/../tools/spectool" --list-files --source 0 "$1" 2> $ERR_OUTPUT
    else
        rpm -q --define "dist .$DIST" \
            --qf "$2" --specfile "$1" 2> $ERR_OUTPUT
    fi
fi
